{
    "version": "1.17",
    "alias": "leg",
    "color": "#991c24",
    "mute": false,
    "solo": false,
    "meta_data": {
        "positions": {
            "/IK_FK_blend2": [
                -554.0628942472428,
                -138.82848463038815
            ],
            "/d": [
                -33.0,
                -180.0
            ],
            "/hand": [
                -882.5040700634605,
                121.24838527828413
            ],
            "/leg": [
                207.85213614351017,
                386.59223338887466
            ],
            "/node": [
                -152.03252032520325,
                -225.36585365853657
            ]
        },
        "collapse": {
            "/leg": false,
            "/leg/IK_FK_duplicate_blend": false,
            "/leg/IK_FK_duplicate_blend/FK_controls": false,
            "/leg/IK_FK_duplicate_blend/FK_controls/IK_controls": true,
            "/node": true
        }
    },
    "nodes": {
        "/": {
            "code": [
                "import maya.cmds as mc",
                "from pymel.all import mel",
                "",
                "from rigLib.utils.control_create import Control    ",
                "from rigLib.utils.placeholder_loc import placeHolder",
                "",
                "control = Control()",
                ""
            ]
        },
        "/leg": {
            "start_point": true,
            "child_order": [
                "IK_FK_duplicate_blend"
            ],
            "attrs": {
                "joints": {
                    "type": "list",
                    "value": "[\"l_hip\",'l_knee','l_foot',\"l_toes\",\"l_toes_end\"]"
                }
            },
            "code": [
                "STAGE.joints = [\"l_hip\",'l_knee','l_foot',\"l_toes\",\"l_toes_end\"]",
                ""
            ]
        },
        "/leg/IK_FK_duplicate_blend": {
            "child_order": [
                "FK_controls"
            ],
            "enabled": true,
            "attrs": {
                "FK_joints": {},
                "IK_FK_constraints": {},
                "IK_joints": {}
            },
            "code": [
                "# Dulicate for IK and FK and add parent constraint",
                "def ik_fk_duplicate_blend(joints):",
                "    ",
                "    #IK Joints",
                "    ",
                "    IK_joints = mel.duplicateJoints(\"_IK\",joints)",
                "    self.IK_joints = IK_joints",
                "",
                "",
                "    ",
                "    #FK Joints",
                "    FK_joints = mel.duplicateJoints(\"_FK\",joints)",
                "    self.FK_joints = FK_joints",
                "",
                "    ",
                "    # IK FK blend",
                "    IK_FK_constraints = mel.ik_fk_blend(joints)",
                "    self.IK_FK_constraints = IK_FK_constraints",
                "",
                "",
                "ik_fk_duplicate_blend(self.joints)"
            ]
        },
        "/leg/IK_FK_duplicate_blend/FK_controls": {
            "child_order": [
                "IK_controls"
            ],
            "enabled": true,
            "attrs": {
                "FK_ctrl_grps": {},
                "FK_skip": {
                    "type": "list",
                    "value": "[\"l_toes_end_FK\"]"
                },
                "aimAxis": {
                    "type": "str",
                    "value": "\"X\""
                }
            },
            "code": [
                "def FKCtrls(FK_joints,ctrl_skip):",
                "    # FK control",
                "    ctrl_offset_grp_names = []",
                "    ctrl_names = []",
                "    for joint in FK_joints:",
                "        if not joint in ctrl_skip:",
                "            if not joint.endswith(\"_end\"):",
                "                FK_control = control.create(name=joint,translateTo=joint,scale=0.06,color=12,aimAxis=\"X\")",
                "                ctrl_names.append(FK_control[1])     ",
                "                ctrl_offset_grp_names.append(FK_control[0])",
                "",
                "                ",
                "                mc.parentConstraint(FK_control[1], joint)",
                "        ",
                "    # Parent ",
                "    # Humerus > Radius > Wrist",
                "    for i in range(len(ctrl_names)):",
                "        try:",
                "            mc.parent( ctrl_offset_grp_names[i + 1], ctrl_names[i])",
                "        except:",
                "            pass",
                "    ",
                "    # return offset group and control",
                "    output = [ctrl_offset_grp_names,ctrl_names]",
                "    return output",
                "        ",
                "        ",
                "self.FK_ctrl_grps = FKCtrls(self.FK_joints,self.FK_skip)",
                "",
                ""
            ]
        },
        "/leg/IK_FK_duplicate_blend/FK_controls/IK_controls": {
            "code": [
                "def createIK_ctrl(joints,IK_joints,endEffector):",
                "    # create IK control at the end joint",
                "",
                "    IK_control = control.create(name=IK_joints[endEffector],translateTo=IK_joints[endEffector],scale=0.05,type=\"Four Arrows\",aimAxis=\"X\")",
                "    print(\"temp_2\")",
                "    # Orient constraint from the IK controller to the IK end effector joint ",
                "    # IK_wrist_ori_const = mc.orientConstraint(IK_control[1],joints[endEffector])",
                "",
                "    return IK_control",
                "    ",
                "createIK_ctrl(self.joints,self.IK_joints,2)",
                "",
                "# create pole vector control with offset",
                "def poleVectorCtrl(pv_joint):",
                "    # Create Pole Vector location using Locators.",
                "    main_locator = mc.spaceLocator(n=\"main_loc\",p=[0,0,0])",
                "    sub_locator = mc.spaceLocator(n=\"sub_loc\")",
                "    ",
                "    # have to move the locator",
                "    mc.parent(sub_locator,main_locator)",
                "    temp = mc.parentConstraint(pv_joint, main_locator)",
                "    ",
                "    PV_control = control.create(name=pv_joint + \"_pv\", aimAxis=\"Z\",translateTo=pv_joint,scale=0.02,type=\"Sphere Pin\")",
                "    mc.delete(mc.parentConstraint(sub_locator,PV_control[0]))",
                "    mc.delete(temp)",
                "    mc.delete(main_locator)",
                "    ",
                "    return PV_control",
                "",
                "poleVectorCtrl(\"l_knee\")",
                "",
                "# create IK effector",
                "def IKEffector(ik_joints,startJoint,endEffector):",
                "    # set IK effector",
                "    ikHandle = mc.ikHandle(n=ik_joints[startJoint] + \"_Handle\", sj = ik_joints[startJoint], ee= ik_joints[endEffector],sol=\"ikRPsolver\")",
                "    mc.parent(ikHandle[0], ik_joints[endEffector] + \"_ctrl\")",
                "    return ikHandle[0]",
                "    ",
                "IKEffector(self.IK_joints,0,2)"
            ]
        }
    }
}