// Point and Orient Constraint
proc alignAtoB(string $objA, string $objB) {
	delete `pointConstraint -offset 0 0 0 -weight 1 $objB $objA`;
	delete `orientConstraint -offset 0 0 0 -weight 1 $objB $objA`;
	select $objA;                                          
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
	select -cl;
}//eop



// Duplicate joints from selection
// Make the selection from parent to child.
global proc string[] duplicateJoints(string $suffix, string $joints[]){
    string $output[];
    // string $joints[] = `ls -type "joint" -type "transform" -sl -l`;
    for ($joint in $joints){
        select $joint;
        string $buffer[];
        tokenize $joint "|" $buffer;
        string $jointName = $buffer[size($buffer)-1];
        // create new joint node
        string $duplicateJoint = `createNode "joint" -n ($jointName + $suffix)`;
        $output[size($output)] = $duplicateJoint;
        alignAtoB($duplicateJoint, $joint);
        
        
        // attach the new joints to the corresponding parents.
        string $jointParent[] = `listRelatives -p $joint`;
		int $stop = 0;
		while (`objExists $jointParent[0]` && $stop == 0) {
			//print ("The joint parent is "+$jointParent[0]+"\n");
			if (`objExists ($jointParent[0]+ $suffix)`) {
				parent $duplicateJoint ($jointParent[0]+ $suffix);
				$stop = 1;
			}
			$jointParent = `listRelatives -p $jointParent[0]`;
		}
    }
    return $output;
}



// IK FK blend with return value
global proc string[] ik_fk_blend(string $joints[]){
    string $constraints[];
    for ($joint in $joints){
        string $IK_joint = $joint + "_IK";
        string $FK_joint = $joint + "_FK";
        string $joint_name = $joint + "_IF_FK_constraint";
    
        string $constraint[] = `parentConstraint -n $joint_name $IK_joint $FK_joint $joint`;
        $constraints[size($constraints)] = $constraint[0];
    
    }
    return $constraints;
}

// Lock channel from selection
global proc lockChannels() {
	string $channels[] = {"translateX", "translateY", "translateZ", "rotateX", "rotateY", "rotateZ", "scaleX", "scaleY", "scaleZ"};
	string $sel[] = `ls -sl`;
	for ($node in $sel) {
		for ($channel in $channels) {
			if (`attributeExists $channel $node`) {
				setAttr -cb 0 -l 1 -k 0 ($node+"."+$channel);
			}
		}
	}
}//eop

// Lock channel from given list
global proc lockChannelsList(string $sel[]) {
	string $channels[] = {"translateX", "translateY", "translateZ", "rotateX", "rotateY", "rotateZ", "scaleX", "scaleY", "scaleZ"};
	for ($node in $sel) {
		for ($channel in $channels) {
			if (`attributeExists $channel $node`) {
				setAttr -cb 0 -l 1 -k 0 ($node+"."+$channel);
			}
		}
	}
}//eop

